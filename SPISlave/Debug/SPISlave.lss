
SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093b  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00000b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001cb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Blink_LED>:
/**
 * @brief Toggles an LED at a designated rate.
 *
 */
void Blink_LED(volatile uint8_t * port, uint8_t pin)
{
  80:	fc 01       	movw	r30, r24
    SET_BIT(*port, pin);
  82:	80 81       	ld	r24, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <Blink_LED+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <Blink_LED+0xa>
  92:	82 2b       	or	r24, r18
  94:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f e4       	ldi	r24, 0x4F	; 79
  98:	93 ec       	ldi	r25, 0xC3	; 195
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <Blink_LED+0x1a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <Blink_LED+0x20>
  a0:	00 00       	nop
    _delay_ms(200);
    CLR_BIT(*port, pin);
  a2:	80 81       	ld	r24, Z
  a4:	20 95       	com	r18
  a6:	28 23       	and	r18, r24
  a8:	20 83       	st	Z, r18
  aa:	8f e4       	ldi	r24, 0x4F	; 79
  ac:	93 ec       	ldi	r25, 0xC3	; 195
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <Blink_LED+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <Blink_LED+0x34>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <main>:
#include "led.h"


int main(void)
{
    DDRD = 0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0x20;
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	87 b9       	out	0x07, r24	; 7
    SET_BIT(PORTC, 5);
  c0:	45 9a       	sbi	0x08, 5	; 8
    
    SPISlaveInit();
  c2:	0e 94 70 00 	call	0xe0	; 0xe0 <SPISlaveInit>
    
    while (1) 
    {
        if (SPIRead() ==  0x01)
  c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPIRead>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0xe>
        {
            Blink_LED(&PORTD, 0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8b e2       	ldi	r24, 0x2B	; 43
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 40 00 	call	0x80	; 0x80 <Blink_LED>
            SPIWrite(0x02);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 75 00 	call	0xea	; 0xea <SPIWrite>
  de:	f3 cf       	rjmp	.-26     	; 0xc6 <main+0xe>

000000e0 <SPISlaveInit>:
     SPCR = (1<<SPE) | (1<<MSTR);   // SPI Enable, Master -> True
}

void SPISlaveInit()
{
    DDRB = (1<<MISO);
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE);//| (0<<MSTR);
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	8c bd       	out	0x2c, r24	; 44
  e8:	08 95       	ret

000000ea <SPIWrite>:
}

void SPIWrite(char data)
{
    SPDR = data;
  ea:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  ec:	0d b4       	in	r0, 0x2d	; 45
  ee:	07 fe       	sbrs	r0, 7
  f0:	fd cf       	rjmp	.-6      	; 0xec <SPIWrite+0x2>
}
  f2:	08 95       	ret

000000f4 <SPIRead>:

char SPIRead()
{
    // TODO not sure if need to wait for read, test this
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPIRead>
    return SPDR;
  fa:	8e b5       	in	r24, 0x2e	; 46
}
  fc:	08 95       	ret

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
