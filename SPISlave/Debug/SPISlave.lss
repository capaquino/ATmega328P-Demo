
SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ba  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "spi.h"


int main(void)
{
    DDRD = 0x01;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0x20;
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	87 b9       	out	0x07, r24	; 7
    PORTC = 1<<PINC5;
  88:	88 b9       	out	0x08, r24	; 8
    
    SPISlaveInit();
  8a:	0e 94 55 00 	call	0xaa	; 0xaa <SPISlaveInit>
        temp = PINB;
        if ((temp & 0x02) == 0x02)
        {
            if (SPIRead() ==  0x01)
            {
                PORTD = 0x01;
  8e:	c1 e0       	ldi	r28, 0x01	; 1
    char temp;
    
    while (1) 
    {
        temp = PINB;
        if ((temp & 0x02) == 0x02)
  90:	19 9b       	sbis	0x03, 1	; 3
  92:	09 c0       	rjmp	.+18     	; 0xa6 <main+0x26>
        {
            if (SPIRead() ==  0x01)
  94:	0e 94 5f 00 	call	0xbe	; 0xbe <SPIRead>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	d1 f7       	brne	.-12     	; 0x90 <main+0x10>
            {
                PORTD = 0x01;
  9c:	cb b9       	out	0x0b, r28	; 11
                SPIWrite(0x02);
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <SPIWrite>
  a4:	f5 cf       	rjmp	.-22     	; 0x90 <main+0x10>
            }
        }    
        else
        {
            PORTD = 0x00;        
  a6:	1b b8       	out	0x0b, r1	; 11
  a8:	f3 cf       	rjmp	.-26     	; 0x90 <main+0x10>

000000aa <SPISlaveInit>:
     SPCR = (1<<SPE) | (1<<MSTR);   // SPI Enable, Master -> True
}

void SPISlaveInit()
{
    DDRB = (1<<MISO);
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE);//| (0<<MSTR);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	8c bd       	out	0x2c, r24	; 44
  b2:	08 95       	ret

000000b4 <SPIWrite>:
}

void SPIWrite(char data)
{
    SPDR = data;
  b4:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPIWrite+0x2>
}
  bc:	08 95       	ret

000000be <SPIRead>:

char SPIRead()
{
    // TODO not sure if need to wait for read, test this
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <SPIRead>
    return SPDR;
  c4:	8e b5       	in	r24, 0x2e	; 46
}
  c6:	08 95       	ret

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
