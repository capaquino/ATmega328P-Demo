
MicroDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab6  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081d  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029b  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include "states.h"

int main(void)
{
    DDRB = 0x00; // Inputs
  a6:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x20; // Heartbeat
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xE0; // State indicator LEDs
  ac:	80 ee       	ldi	r24, 0xE0	; 224
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	90 e0       	ldi	r25, 0x00	; 0
	
    for (int i=0; i<10; i++)
    {
        PORTC |= 1<<PINC5;
  b4:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	e3 ed       	ldi	r30, 0xD3	; 211
  b8:	f0 e3       	ldi	r31, 0x30	; 48
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x1a>
  c0:	00 00       	nop
        _delay_ms(50);
        PORTC |= 0<<PINC5;
  c2:	28 b1       	in	r18, 0x08	; 8
  c4:	28 b9       	out	0x08, r18	; 8
  c6:	e3 ed       	ldi	r30, 0xD3	; 211
  c8:	f0 e3       	ldi	r31, 0x30	; 48
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x24>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2a>
  d0:	00 00       	nop
  d2:	01 97       	sbiw	r24, 0x01	; 1
{
    DDRB = 0x00; // Inputs
	DDRC = 0x20; // Heartbeat
	DDRD = 0xE0; // State indicator LEDs
	
    for (int i=0; i<10; i++)
  d4:	79 f7       	brne	.-34     	; 0xb4 <main+0xe>
        PORTC |= 1<<PINC5;
        _delay_ms(50);
        PORTC |= 0<<PINC5;
        _delay_ms(50);
    }
    PORTC = 1<<PINC5;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	88 b9       	out	0x08, r24	; 8

	while (1) 
    {
        ReadState();
  da:	0e 94 ab 00 	call	0x156	; 0x156 <ReadState>
        state_table[State]();
  de:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e0 50       	subi	r30, 0x00	; 0
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	01 90       	ld	r0, Z+
  ee:	f0 81       	ld	r31, Z
  f0:	e0 2d       	mov	r30, r0
  f2:	09 95       	icall
  f4:	f2 cf       	rjmp	.-28     	; 0xda <main+0x34>

000000f6 <SpiState>:
        State = IDLE_STATE;
}

void SpiState(void)
{
	PORTD = 0x20;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	83 e2       	ldi	r24, 0x23	; 35
  fc:	94 ef       	ldi	r25, 0xF4	; 244
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <SpiState+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <SpiState+0xe>
 104:	00 00       	nop
	_delay_ms(250);
	PORTD = 0x00;
 106:	1b b8       	out	0x0b, r1	; 11
 108:	83 e2       	ldi	r24, 0x23	; 35
 10a:	94 ef       	ldi	r25, 0xF4	; 244
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <SpiState+0x16>
 110:	00 c0       	rjmp	.+0      	; 0x112 <SpiState+0x1c>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <I2cState>:
	_delay_ms(250);
}

void I2cState(void)
{
	PORTD = 0x40;
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	83 e2       	ldi	r24, 0x23	; 35
 11c:	94 ef       	ldi	r25, 0xF4	; 244
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <I2cState+0x8>
 122:	00 c0       	rjmp	.+0      	; 0x124 <I2cState+0xe>
 124:	00 00       	nop
	_delay_ms(250);
	PORTD = 0x00;
 126:	1b b8       	out	0x0b, r1	; 11
 128:	83 e2       	ldi	r24, 0x23	; 35
 12a:	94 ef       	ldi	r25, 0xF4	; 244
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <I2cState+0x16>
 130:	00 c0       	rjmp	.+0      	; 0x132 <I2cState+0x1c>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <IdleState>:
	_delay_ms(250);
}

void IdleState(void)
{
	PORTD = 0x80;
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	83 e2       	ldi	r24, 0x23	; 35
 13c:	94 ef       	ldi	r25, 0xF4	; 244
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <IdleState+0x8>
 142:	00 c0       	rjmp	.+0      	; 0x144 <IdleState+0xe>
 144:	00 00       	nop
	_delay_ms(250);
	PORTD = 0x00;
 146:	1b b8       	out	0x0b, r1	; 11
 148:	83 e2       	ldi	r24, 0x23	; 35
 14a:	94 ef       	ldi	r25, 0xF4	; 244
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <IdleState+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <IdleState+0x1c>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <ReadState>:
void (*state_table[])() = {SpiState, I2cState, IdleState};

void ReadState(void)
{
    uint8_t temp;
    temp = PINB;
 156:	83 b1       	in	r24, 0x03	; 3
    

    if ((temp & 0x02) == 0x02)
 158:	81 ff       	sbrs	r24, 1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <ReadState+0xc>
        State = SPI_STATE;
 15c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 160:	08 95       	ret
    else if ((temp & 0x04) == 0x04 )
 162:	82 ff       	sbrs	r24, 2
 164:	04 c0       	rjmp	.+8      	; 0x16e <ReadState+0x18>
        State = I2C_STATE;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 16c:	08 95       	ret
    else
        State = IDLE_STATE;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
