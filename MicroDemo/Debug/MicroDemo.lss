
MicroDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9a  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058d  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  9e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Blink_LED>:
/**
 * @brief Toggles an LED at a designated rate.
 *
 */
void Blink_LED(volatile uint8_t * port, uint8_t pin)
{
  a6:	fc 01       	movw	r30, r24
    SET_BIT(*port, pin);
  a8:	80 81       	ld	r24, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <Blink_LED+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <Blink_LED+0xa>
  b8:	82 2b       	or	r24, r18
  ba:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Blink_LED+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <Blink_LED+0x20>
  c6:	00 00       	nop
    _delay_ms(200);
    CLR_BIT(*port, pin);
  c8:	80 81       	ld	r24, Z
  ca:	20 95       	com	r18
  cc:	28 23       	and	r18, r24
  ce:	20 83       	st	Z, r18
  d0:	8f e4       	ldi	r24, 0x4F	; 79
  d2:	93 ec       	ldi	r25, 0xC3	; 195
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <Blink_LED+0x2e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <Blink_LED+0x34>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <main>:
#include "led.h"

int main(void)
{
    // TODO move these to general purpose init()
    DDRB = 0x02; // Inputs, and Invalid state led on PB1
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x20; // ON Indicator LED
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xE1; // State indicator LEDs
  e6:	81 ee       	ldi	r24, 0xE1	; 225
  e8:	8a b9       	out	0x0a, r24	; 10
    SET_BIT(PORTC, 5);
  ea:	45 9a       	sbi	0x08, 5	; 8

    SPIMasterInit();
  ec:	0e 94 86 00 	call	0x10c	; 0x10c <SPIMasterInit>

	while (1) 
    {
        ReadState();
  f0:	0e 94 ba 00 	call	0x174	; 0x174 <ReadState>
        state_table[State]();
  f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	01 90       	ld	r0, Z+
 104:	f0 81       	ld	r31, Z
 106:	e0 2d       	mov	r30, r0
 108:	09 95       	icall
 10a:	f2 cf       	rjmp	.-28     	; 0xf0 <main+0x12>

0000010c <SPIMasterInit>:
}

void SPISlaveInit()
{
    DDRB = (1<<MISO);
    SPCR = (1<<SPE);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	88 62       	ori	r24, 0x28	; 40
 110:	84 b9       	out	0x04, r24	; 4
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8c bd       	out	0x2c, r24	; 44
 116:	08 95       	ret

00000118 <SPIWrite>:
}

void SPIWrite(char data)
{
    SPDR = data;
 118:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPIWrite+0x2>
}
 120:	08 95       	ret

00000122 <SPIRead>:

char SPIRead()
{
    // TODO not sure if need to wait for read, test this
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
 122:	0d b4       	in	r0, 0x2d	; 45
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <SPIRead>
    return SPDR;
 128:	8e b5       	in	r24, 0x2e	; 46
}
 12a:	08 95       	ret

0000012c <SpiState>:
    }
}

void SpiState(void)
{
    SPIWrite(0x01);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 8c 00 	call	0x118	; 0x118 <SPIWrite>
    if (SPIRead() ==  0x02)
 132:	0e 94 91 00 	call	0x122	; 0x122 <SPIRead>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	29 f4       	brne	.+10     	; 0x144 <SpiState+0x18>
    {
        Blink_LED(&PORTD, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	8b e2       	ldi	r24, 0x2B	; 43
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <Blink_LED>
    }
    Blink_LED(&PORTD, 6); // state led
 144:	66 e0       	ldi	r22, 0x06	; 6
 146:	8b e2       	ldi	r24, 0x2B	; 43
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <Blink_LED>
 14e:	08 95       	ret

00000150 <I2cState>:
}

void I2cState(void)
{
    Blink_LED(&PORTD, 5); // state led
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	8b e2       	ldi	r24, 0x2B	; 43
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <Blink_LED>
 15a:	08 95       	ret

0000015c <IdleState>:
}

void IdleState(void)
{
    Blink_LED(&PORTD, 7); // state led
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <Blink_LED>
 166:	08 95       	ret

00000168 <InvalidState>:
}

void InvalidState(void)
{
    Blink_LED(&PORTB, 0);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	85 e2       	ldi	r24, 0x25	; 37
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <Blink_LED>
 172:	08 95       	ret

00000174 <ReadState>:
void (*state_table[])() = {SpiState, I2cState, IdleState, InvalidState};

void ReadState(void)
{
    uint8_t temp;
    temp = PINC;
 174:	86 b1       	in	r24, 0x06	; 6
    
    switch (temp & 0b00000111) // PC0-2
 176:	87 70       	andi	r24, 0x07	; 7
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	41 f0       	breq	.+16     	; 0x18c <ReadState+0x18>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	49 f0       	breq	.+18     	; 0x192 <ReadState+0x1e>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	59 f4       	brne	.+22     	; 0x19a <ReadState+0x26>
    {
        case 0b0001: State = IDLE_STATE;    break; //PC0 hi
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 18a:	08 95       	ret
        case 0b0010: State = SPI_STATE;     break; //PC1 hi
 18c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 190:	08 95       	ret
        case 0b0100: State = I2C_STATE;     break; //PC2 hi
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 198:	08 95       	ret
        default: State = INVALID_STATE;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
