
MicroDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000186  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b27  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000852  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e1  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
    // TODO move these to led.c/h
    DDRB = 0x00; // Inputs
  a6:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x20; // ON Indicator LED
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xE1; // State indicator LEDs
  ac:	91 ee       	ldi	r25, 0xE1	; 225
  ae:	9a b9       	out	0x0a, r25	; 10
    PORTC = 1<<PINC5;
  b0:	88 b9       	out	0x08, r24	; 8

    SPIMasterInit();
  b2:	0e 94 69 00 	call	0xd2	; 0xd2 <SPIMasterInit>

	while (1) 
    {
        ReadState();
  b6:	0e 94 b1 00 	call	0x162	; 0x162 <ReadState>
        state_table[State]();
  ba:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	e0 50       	subi	r30, 0x00	; 0
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	01 90       	ld	r0, Z+
  ca:	f0 81       	ld	r31, Z
  cc:	e0 2d       	mov	r30, r0
  ce:	09 95       	icall
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0x10>

000000d2 <SPIMasterInit>:
}

void SPISlaveInit()
{
    DDRB = (1<<MISO);
    SPCR = (1<<SPE);//| (0<<MSTR);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	88 62       	ori	r24, 0x28	; 40
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	80 e5       	ldi	r24, 0x50	; 80
  da:	8c bd       	out	0x2c, r24	; 44
  dc:	08 95       	ret

000000de <SPIWrite>:
}

void SPIWrite(char data)
{
    SPDR = data;
  de:	8e bd       	out	0x2e, r24	; 46
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  e0:	0d b4       	in	r0, 0x2d	; 45
  e2:	07 fe       	sbrs	r0, 7
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <SPIWrite+0x2>
}
  e6:	08 95       	ret

000000e8 <SPIRead>:

char SPIRead()
{
    // TODO not sure if need to wait for read, test this
    while( !(SPSR & (1<<SPIF) ));       // Wait, SPIF is set 1 on transfer complete
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <SPIRead>
    return SPDR;
  ee:	8e b5       	in	r24, 0x2e	; 46
}
  f0:	08 95       	ret

000000f2 <I2cState>:
	_delay_ms(200);
}

void I2cState(void)
{
	PORTD |= 0x40;
  f2:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e4       	ldi	r24, 0x4F	; 79
  f6:	93 ec       	ldi	r25, 0xC3	; 195
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <I2cState+0x6>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <I2cState+0xc>
  fe:	00 00       	nop
	_delay_ms(200);
	PORTD &= ~0x40;
 100:	5e 98       	cbi	0x0b, 6	; 11
 102:	8f e4       	ldi	r24, 0x4F	; 79
 104:	93 ec       	ldi	r25, 0xC3	; 195
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <I2cState+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <I2cState+0x1a>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <IdleState>:
	_delay_ms(200);
}

void IdleState(void)
{
	PORTD |= 0x80;
 110:	5f 9a       	sbi	0x0b, 7	; 11
 112:	8f e4       	ldi	r24, 0x4F	; 79
 114:	93 ec       	ldi	r25, 0xC3	; 195
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <IdleState+0x6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <IdleState+0xc>
 11c:	00 00       	nop
	_delay_ms(200);
	PORTD &= ~0x80;
 11e:	5f 98       	cbi	0x0b, 7	; 11
 120:	8f e4       	ldi	r24, 0x4F	; 79
 122:	93 ec       	ldi	r25, 0xC3	; 195
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <IdleState+0x14>
 128:	00 c0       	rjmp	.+0      	; 0x12a <IdleState+0x1a>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <SpiState>:
        State = IDLE_STATE;
}

void SpiState(void)
{
    SPIWrite(0x01);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 6f 00 	call	0xde	; 0xde <SPIWrite>
    char read = SPIRead();
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <SPIRead>
    if (read == 0x02)
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	11 f4       	brne	.+4      	; 0x140 <SpiState+0x12>
        PORTD |= 1<<PIND0;
 13c:	58 9a       	sbi	0x0b, 0	; 11
 13e:	02 c0       	rjmp	.+4      	; 0x144 <SpiState+0x16>
    else
        PORTD |= 0<<PIND0;
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8b b9       	out	0x0b, r24	; 11
    
    
	PORTD |= 0x20;
 144:	5d 9a       	sbi	0x0b, 5	; 11
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <SpiState+0x1c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <SpiState+0x22>
 150:	00 00       	nop
	_delay_ms(200);
	PORTD &= ~0x20;
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	8f e4       	ldi	r24, 0x4F	; 79
 156:	93 ec       	ldi	r25, 0xC3	; 195
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <SpiState+0x2a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <SpiState+0x30>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <ReadState>:
void (*state_table[])() = {SpiState, I2cState, IdleState};

void ReadState(void)
{
    uint8_t temp;
    temp = PINC;
 162:	86 b1       	in	r24, 0x06	; 6
    
    /* This is flawed.  If PB1 and PB2 are HIGH, it will still go to SPI State and not IDLE State */
    if ((temp & 0x02) == 0x02)  
 164:	81 ff       	sbrs	r24, 1
 166:	03 c0       	rjmp	.+6      	; 0x16e <ReadState+0xc>
        State = SPI_STATE;      
 168:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 16c:	08 95       	ret
    else if ((temp & 0x04) == 0x04 )
 16e:	82 ff       	sbrs	r24, 2
 170:	04 c0       	rjmp	.+8      	; 0x17a <ReadState+0x18>
        State = I2C_STATE;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 178:	08 95       	ret
    else
        State = IDLE_STATE;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
